<?php
/**
 * @file
 * Code for the Caroneiros Carona feature.
 */

include_once 'caroneiros_carona.features.inc';

/**
 * Implements hook_menu().
 */
function caroneiros_carona_menu() {
    $items = array();

    $items['node/%node/request'] = array(
        'title' => t('Request'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('caroneiros_carona_request_form', 1),
        'access callback' => 'user_is_logged_in',
        'file' => 'caroneiros_carona.pages.inc',
        'type' => MENU_CALLBACK,
    );

    return $items;
}

/**
 * Implements hook_preprocess_node().
 */
 function caroneiros_carona_preprocess_node(&$variables) {
    if ($variables['type'] == 'carona') {
        global $user;
        $nid = $variables['nid'];
        $account = user_load($variables['uid']);
        $name = $account->field_nome[LANGUAGE_NONE][0]['value'];

        $query = new EntityFieldQuery();
        $ids = $query->entityCondition('entity_type', 'node')
                ->entityCondition('bundle', 'request')
                ->propertyCondition('status', array(1), 'IN')
                ->fieldCondition('field_carona', 'target_id', $nid)
                ->execute();
                
        $nodes = array();        
        if (!empty($ids)) {
            $nodes = node_load_multiple(array_keys($ids['node']));
        }

        switch ($variables['field_tipo'][LANGUAGE_NONE][0]['value']) {
            case 'offer':
                $variables['title'] = t('@user está oferecendo carona', array('@user' => $name));
                if ($user->uid != $account->uid && $variables['field_vagas'][0]['value'] > count($nodes)) {
                    $variables['button'] = l(t('Pedir carona'), "node/$nid/request", array('attributes' => array('class' => array('btn', 'btn-default'))));
                }
                break;
            case 'request':
                $variables['title'] = t('@user is pedindo carona', array('@user' => $name));
                $variables['button'] = l(t('Ofereça carona'), "node/$nid/request", array('attributes' => array('class' => array('btn', 'btn-default'))));
                break;
        }
        
        list($date, $hour) = explode(' ', $variables['field_data'][0]['value']);
        $variables['date'] = $date;
        $variables['hour'] = $hour;
        $variables['vaccancies'] = $variables['field_vagas'][0]['value'] - count($nodes);
        $variables['distance'] = 'TODO';
        
        // Map
        $locations = getdirections_load_locations($variables['nid'], 'node');
        
        foreach ($locations as $location) {
            $locs[] = _getdirections_loadaddress($location);
            $latlons[] = $location['latitude'] . ',' . $location['longitude'];
        }
        
        $getdirections_defaults = getdirections_defaults();
        $getdirections_misc = getdirections_misc_defaults();
        getdirections_setup_map($getdirections_defaults, $getdirections_misc);
        $getdirections_settings = getdirections_get_settings($getdirections_defaults, $getdirections_misc);
        $getdirections_settings['latlons'] = implode('|', $latlons);

        $mapid = getdirections_get_key();
        drupal_add_js(array('getdirections' => array($mapid => $getdirections_settings)), 'setting');
        
        $variables['content']['map'] = array(
            '#theme' => 'getdirections_show_locations_via',
            '#mapid' => $mapid,
            '#width' => '548px',
            '#height' => '356px',
            '#locs' => $locs
        );

        drupal_add_css(drupal_get_path('module', 'caroneiros_carona') . '/css/caroneiros_carona.css');
    }
}

/**
 * Implements hook_theme().
 */
function caroneiros_carona_theme($existing, $type, $theme, $path) {
  return array(
    'carona_node_form' => array(
      'render element' => 'form',
      'template' => 'carona-node-form',
      'path' => drupal_get_path('theme', 'bootstrap') . '/boostrap_subtheme/templates',
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function caroneiros_carona_form_carona_node_form_alter(&$form, &$form_state) {
    $form['#attached']['js'][] = drupal_get_path('module', 'caroneiros_carona') . '/js/caroneiros_carona.form.js';
}

/**
 * Implements hook_cron().
 */
function caroneiros_carona_cron() {
    $date = date('Y-m-d H:i:s', REQUEST_TIME);
    $query = new EntityFieldQuery();
    $ids = $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'carona')
            ->propertyCondition('status', 1)
            ->fieldCondition('field_data', 'value', $date, '<=')
            ->execute();
                
    $nodes = array();        
    if (!empty($ids)) {
        $nodes = node_load_multiple(array_keys($ids['node']));
    }

    foreach ($nodes as $node) {
        $node->status = 0;
        node_save($node);
    }
}

/**
 * Implements hook_preprocess_views_view_fields().
 */
function caroneiros_carona_preprocess_views_view_fields(&$variables) {

    if ($variables['view']->name == 'caronas_disponiveis') {
        $id = $variables['id'];
        $destino = $variables['view']->result[$id-1]->field_field_destino[0]['raw'];
        $variables['fields']['field_destino']->content =
            '<div class="location">' .
                $destino['street'] . ', ' .
                $destino['city'] . ' - ' .
                $destino['province'] .
            '</div>';

        $origem = $variables['view']->result[$id-1]->field_field_origem[0]['raw'];
        $variables['fields']['field_origem']->content =
            '<div class="location">' .
                $origem['street'] . ', ' .
                $origem['city'] . ' - ' .
                $origem['province'] .
            '</div>';
    }
}